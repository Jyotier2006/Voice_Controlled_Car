#include <SoftwareSerial.h>

// Bluetooth RX on 10, TX on 11
SoftwareSerial bluetooth(10, 11);

// Motor driver pins
const int IN1 = 4;
const int IN2 = 7;
const int IN3 = 6;
const int IN4 = 5;

// Ultrasonic sensor pins
const int trigPin = 8;
const int echoPin = 9;

// Timing for distance check
unsigned long lastDistanceCheck = 0;
const unsigned long distanceInterval = 100; // check every 100ms
volatile long currentDistance = 999; // global distance reading

String lastCommand = "";
unsigned long lastCommandTime = 0;
const unsigned long commandCooldown = 800;

void setup() {
  bluetooth.begin(9600);
  Serial.begin(9600);

  // Motor pins
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  // Ultrasonic pins
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  Serial.println("Car with Real-time Obstacle Detection Ready");
}

void loop() {
  // Update distance in background every 100ms
  if (millis() - lastDistanceCheck > distanceInterval) {
    currentDistance = getDistance();
    lastDistanceCheck = millis();

    Serial.print("Distance: ");
    Serial.print(currentDistance);
    Serial.println(" cm");
  }

  // Handle Bluetooth commands
  if (bluetooth.available()) {
    char c = bluetooth.read();

    String cmd = String(c);
    cmd.trim();
    cmd.toLowerCase();

    if (cmd != lastCommand || millis() - lastCommandTime > commandCooldown) {
      handleCommand(cmd);
      lastCommand = cmd;
      lastCommandTime = millis();
    }
  }
}

// Non-blocking distance function with timeout
long getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 20000); // 20ms timeout
  if (duration == 0) return 999; // assume no object

  long distance = duration / 58; // more stable than using float
  return distance;
}

// Use currentDistance for decision making
void handleCommand(String cmd) {
  if (cmd == "f" || cmd == "forward") {
    if (currentDistance < 3) {
      Serial.println("Obstacle Ahead! Can't move forward.");
      stopCar();
    } else {
      Serial.println("Moving Forward");
      forward();
    }
  } else if (cmd == "b" || cmd == "backward") {
    Serial.println("Moving Backward");
    backward();
  } else if (cmd == "l" || cmd == "left") {
    Serial.println("Turning Left");
    left();
  } else if (cmd == "r" || cmd == "right") {
    Serial.println("Turning Right");
    right();
  } else if (cmd == "s" || cmd == "stop") {
    Serial.println("Stopping");
    stopCar();
  } else {
    Serial.println("Unknown Command: " + cmd);
  }
}

// Motor functions
void forward() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, HIGH);
  delay(50);
}

void backward() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}

void left() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

void right() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
}

void stopCar() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}
